name: Test application

on:
    pull_request:
    push:
        branches:
            - master
            - '[0-9]+.[0-9]+'

jobs:
    test:
        name: "Run tests with php ${{ matrix.php-version }}"
        runs-on: ubuntu-latest

        env:
            DATABASE_URL: mysql://root:root@127.0.0.1:3306/sulu_test?serverVersion=5.7

        strategy:
            fail-fast: false
            matrix:
                include:
                    -   php-version: '7.4'
                        phpcr-transport: doctrinedbal
                        composer-flags: '--prefer-dist --no-interaction'
                        php-extensions: 'ctype, iconv, mysql, imagick'
                        tools: 'composer:v2'
                        phpstan: true
                        lint-container: true
                        env:
                            SYMFONY_DEPRECATIONS_HELPER: disabled
                            PHPCR_TRANSPORT: doctrinedbal
                            DATABASE_CHARSET: UTF8
                            DATABASE_COLLATE: UTF8_BIN
                    -   php-version: '8.0'
                        phpcr-transport: doctrinedbal
                        composer-flags: '--prefer-dist --no-interaction'
                        php-extensions: 'ctype, iconv, mysql, imagick'
                        tools: 'composer:v2'
                        phpstan: true
                        lint-container: true
                        env:
                            SYMFONY_DEPRECATIONS_HELPER: disabled
                            PHPCR_TRANSPORT: doctrinedbal
                            DATABASE_CHARSET: UTF8
                            DATABASE_COLLATE: UTF8_BIN

        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: root
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

        steps:
            -   name: Checkout project
                uses: actions/checkout@v2

            -   name: Install and configure PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php-version }}
                    extensions: ${{ matrix.php-extensions }}
                    tools: ${{ matrix.tools }}
                    coverage: none

            -   name: Validate composer.json and composer.lock
                run: composer validate

            -   name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v2
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-

            -   name: Install dependencies
                if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer install --prefer-dist --no-progress

            -   name: Run PHPStan
                run: vendor/bin/phpstan analyse -c phpstan.neon

            -   name: Run Code Sniffer
                run: vendor/bin/phpcs

            -   name: Bootstrap test environment
                run: composer bootstrap-test-environment
                env: ${{ matrix.env }}

            -   name: Run tests
                run: time vendor/bin/phpunit
                env: ${{ matrix.env }}
